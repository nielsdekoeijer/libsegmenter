classdef BPDOctave < handle
    %BPDOctave
    % A class for computing the baseband phase difference transform as
    % described in M. Krawczyk and T. Gerkmann, "STFT Phase Reconstruction
    % in Voiced Speech for an Improved Single-Channel Speech Enhancement",
    % IEEE Transactions on Audio, Speech, and Language Processing, Vol. 22,
    % No. 12, pp. 1931-1940, 2014, DOI:10.1109/TASLP.2014.2354236.
    properties
	magPhaseTransform = [];
    end

    methods
	function obj = BPDOctave()
	    % Initialize the BPD object.
	    obj.magPhaseTransform = MagnitudePhaseTransformOctave();
	end

	function [magnitude, bpd] = forward(obj, input, hopSize)
	    % Converts segments into a bpd.
	    %
	    % Args:
	    %    input (2D / 3D array): Segments as generated by a Segmenter object.
	    [magnitude, phase] = obj.magPhaseTransform.forward(input);
	    segmentSize = size(input, length(size(input)));
	    frequency = 2*pi*(0:segmentSize-1)/segmentSize;
	    if length(size(input)) == 2
		bpd = angle(exp( 1j* ( phase - [zeros(1, segmentSize); phase(1:end-1,:)] - frequency * hopSize ) ));
	    else
		batchSize = size(input,1);
		numSegments = size(input,2);
		bpd = zeros(batchSize, numSegments, segmentSize);
		for bIdx = 1:batchSize
		    tmp = angle(exp( 1j* ( squeeze(phase(bIdx,:,:)) - [zeros(1, segmentSize); squeeze(phase(bIdx, 1:end-1,:))] - repmat(frequency, numSegments, 1) * hopSize ) ));
		    bpd(bIdx, :,:) = tmp;
		end
	    end
	end

	function sequence = inverse(obj, magnitude, bpd, hopSize)
	    % Convert magnitude and bpd into sequences.
	    segmentSize = size(magnitude, length(size(magnitude)));
	    frequency = 2*pi*(0:segmentSize-1)/segmentSize;
	    if length(size(magnitude)) == 2
		phase = angle(exp( 1j* cumsum( bpd + frequency*hopSize, 1 ) ));
	    else
		batchSize = size(magnitude,1);
		numSegments = size(magnitude,2);
		phase = zeros(batchSize, numSegments, segmentSize);
		for bIdx = 1:batchSize
		    tmp = angle(exp( 1j* cumsum( squeeze(bpd(bIdx,:,:)) + repmat(frequency, numSegments,1)*hopSize, 1 ) ));
		    phase(bIdx, :,:) = tmp;
		end
	    end
	    sequence = obj.magPhaseTransform.inverse(magnitude, phase);
	end
    end
end
