classdef MagnitudePhaseTransformOctave < handle
    %MagnitudeOctave
    % A class for computing magnitude / phase spectra.
    %
    % Currently, the normalization for the fourier transform cannot be controlled and is thus `backward` by default.
    properties
	spectrogram = [];
    end
    methods
    	function obj = MagnitudePhaseTransformOctave()
	    % Initialize MagPhaseTransform object.
	    obj.spectrogram = SpectrogramOctave();
	end
	function [magnitude, phase] = forward(obj, input)
	    % Converts segments into magnitude / phase spectrograms.
	    %
	    % Args:
	    %    input (2D / 3D array): Segments as generated by a Segmenter object.
	    spectrogram = obj.spectrogram.forward(input);
	    magnitude = abs(spectrogram);
	    phase = angle(spectrogram);
	end

	function sequence = inverse(obj, magnitude, phase)
	    % Converts magnitude / phase spectra to sequences.
	    %
	    % Args:
	    %     magnitude (2D / 3D array): Magnitude spectra as generated by the `forward` transform.
	    %    phase (2D / 3D array): Phase spectra as generated by the `forward` transform.
	    if length(size(magnitude)) == 2 || length(size(magnitude)) == 3
		if any(~(size(magnitude) == size(phase)))
		    error('Magnitude and phase spectrograms are not of equal size');
		end
		sequence = obj.spectrogram.inverse(magnitude .* exp(1j*phase));
	    else
		error(['Input spectra are expected to be a 2D or 3D array. Received length(size(magnitude)) = ' int2str(length(size(magnitude))) ]);
	    end
	end
    end
end
